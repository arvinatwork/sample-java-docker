# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


jobs:
- job: HelloSample
  displayName: Say Hello 
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - script: echo "Hello Azure DevOps"

- job: GradleTasks
  displayName: Show Gradle Tasks  
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Gradle@2
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'tasks'

- job: GradleBuild
  displayName: Gradle Build
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Gradle@2
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build'

- job: DockerBuild
  displayName: Docker Build
  steps:
  - task: Docker@1
    inputs:
      imageName: 'cdaasasia-docker-local.jfrog.io/devops/java-sample:$(Build.BuildId)'
  - task: Docker@1
    inputs:
      command: 'login'
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: ArtifactoryDockerServiceConnection
  - task: Docker@1
    inputs:
      command: 'push'
      imageName: 'cdaasasia-docker-local.jfrog.io/devops/java-sample:$(Build.BuildId)'

# - job: DockerLogin
#   displayName: Docker Login
#   steps:
#   - task: Docker@1
#     inputs:
#       command: 'login'
#       containerregistrytype: 'Container Registry'
#       dockerRegistryEndpoint: ArtifactoryDockerServiceConnection

# - job: DockerPush
#   displayName: Docker Push
#   steps:
#   - task: Docker@1
#     inputs:
#       command: 'push'
#       imageName: 'cdaasasia-docker-local.jfrog.io/devops/java-sample:$(Build.BuildId)'
